[{"/mnt/d/Desktop/WIP/home-automation/client/src/index.js":"1","/mnt/d/Desktop/WIP/home-automation/client/src/reportWebVitals.js":"2","/mnt/d/Desktop/WIP/home-automation/client/src/App.js":"3","/mnt/d/Desktop/WIP/home-automation/client/src/theme/theme.js":"4","/mnt/d/Desktop/WIP/home-automation/client/src/components/TemperatureHumidityCard.js":"5","/mnt/d/Desktop/WIP/home-automation/client/src/components/RelayCard.js":"6","/mnt/d/Desktop/WIP/home-automation/client/src/components/Sensor.js":"7","/mnt/d/Desktop/WIP/home-automation/client/src/components/AlertMessage.js":"8","/mnt/d/Desktop/WIP/home-automation/client/src/components/Sensors.js":"9","/mnt/d/Desktop/WIP/home-automation/client/src/components/Login.js":"10","/mnt/d/Desktop/WIP/home-automation/client/src/utils/Common.js":"11","/mnt/d/Desktop/WIP/home-automation/client/src/utils/PublicRoute.js":"12","/mnt/d/Desktop/WIP/home-automation/client/src/utils/PrivateRoute.js":"13","/mnt/d/Desktop/WIP/home-automation/client/src/components/DialogFilterBy.js":"14","/mnt/d/Desktop/WIP/home-automation/client/src/components/DashboardExample.js":"15","/mnt/d/Desktop/WIP/home-automation/client/src/components/FetcherMQTTExample.js":"16","/mnt/d/Desktop/WIP/home-automation/client/src/utils/MQTT.js":"17","/mnt/d/Desktop/WIP/home-automation/client/src/components/Menu.js":"18","/mnt/d/Desktop/WIP/home-automation/client/src/components/Actions.js":"19","/mnt/d/Desktop/WIP/home-automation/client/src/components/CollapsibleTable.js":"20","/mnt/d/Desktop/WIP/home-automation/client/src/components/SelectSensorMenu.js":"21","/mnt/d/Desktop/WIP/home-automation/client/src/components/TimerActionDialog.js":"22","/mnt/d/Desktop/WIP/home-automation/client/src/components/SelectCommandMenu.js":"23","/mnt/d/Desktop/WIP/home-automation/client/src/components/SelectRepeatMenu.js":"24","/mnt/d/Desktop/WIP/home-automation/client/src/components/ActionCard.js":"25"},{"size":678,"mtime":1608134068832,"results":"26","hashOfConfig":"27"},{"size":362,"mtime":1607907510898,"results":"28","hashOfConfig":"27"},{"size":1401,"mtime":1610294396612,"results":"29","hashOfConfig":"27"},{"size":1229,"mtime":1610438778688,"results":"30","hashOfConfig":"27"},{"size":2405,"mtime":1610442318187,"results":"31","hashOfConfig":"27"},{"size":3291,"mtime":1610745453053,"results":"32","hashOfConfig":"27"},{"size":1573,"mtime":1610493842350,"results":"33","hashOfConfig":"27"},{"size":1445,"mtime":1610380362980,"results":"34","hashOfConfig":"27"},{"size":1470,"mtime":1610746071244,"results":"35","hashOfConfig":"27"},{"size":4732,"mtime":1610440869780,"results":"36","hashOfConfig":"27"},{"size":721,"mtime":1610040779360,"results":"37","hashOfConfig":"27"},{"size":455,"mtime":1610046079185,"results":"38","hashOfConfig":"27"},{"size":422,"mtime":1610053266438,"results":"39","hashOfConfig":"27"},{"size":3511,"mtime":1610442062156,"results":"40","hashOfConfig":"27"},{"size":10355,"mtime":1610667097310,"results":"41","hashOfConfig":"27"},{"size":3191,"mtime":1610441643673,"results":"42","hashOfConfig":"27"},{"size":1918,"mtime":1610381341397,"results":"43","hashOfConfig":"27"},{"size":473,"mtime":1610399071776,"results":"44","hashOfConfig":"45"},{"size":598,"mtime":1610751799164,"results":"46","hashOfConfig":"27"},{"size":5173,"mtime":1610664561937,"results":"47","hashOfConfig":"27"},{"size":3256,"mtime":1610662118481,"results":"48","hashOfConfig":"27"},{"size":6128,"mtime":1610735640423,"results":"49","hashOfConfig":"27"},{"size":1962,"mtime":1610666627529,"results":"50","hashOfConfig":"27"},{"size":2405,"mtime":1610727683935,"results":"51","hashOfConfig":"27"},{"size":871,"mtime":1610805354463,"results":"52","hashOfConfig":"27"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},"1hixzw7",{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60","usedDeprecatedRules":"55"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"55"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76","usedDeprecatedRules":"55"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"85","usedDeprecatedRules":"55"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"jkh3hr",{"filePath":"94","messages":"95","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"96","usedDeprecatedRules":"55"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"99","usedDeprecatedRules":"55"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"102","usedDeprecatedRules":"55"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"105","usedDeprecatedRules":"55"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"110","usedDeprecatedRules":"55"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/mnt/d/Desktop/WIP/home-automation/client/src/index.js",[],["113","114"],"/mnt/d/Desktop/WIP/home-automation/client/src/reportWebVitals.js",[],"/mnt/d/Desktop/WIP/home-automation/client/src/App.js",["115","116"],"import \"./App.css\";\nimport React, { useEffect, useState } from \"react\";\nimport { BrowserRouter as Router } from \"react-router-dom\";\n\nimport { Switch, Route } from \"react-router-dom\";\nimport Login from \"./components/Login\";\nimport PrivateRoute from \"./utils/PrivateRoute\";\nimport PublicRoute from \"./utils/PublicRoute\";\nimport Dashboard from \"./components/DashboardExample\";\nimport { getToken, removeUserSession, setUserSession } from \"./utils/Common\";\nimport axios from 'axios';\nimport FetcherMQTT from \"./components/FetcherMQTTExample\";\n\nfunction App() {\n  const [authLoading, setAuthLoading] = useState(true);\n\n  useEffect(() => {\n    const token = getToken();\n    if (!token) {\n      return;\n    }\n\n    axios\n      .get(`http://localhost:5000/api/verifyToken?token=${token}`)\n      .then((response) => {\n        setUserSession(response.data.token, response.data.user);\n        setAuthLoading(false);\n      })\n      .catch((error) => {\n        removeUserSession();\n        setAuthLoading(false);\n      });\n  }, []);\n\n  if (authLoading && getToken()) {\n    return <div className=\"content\">Checking Authentication...</div>;\n  }\n  return (\n    <Router>\n      <Switch>\n        {/* <Route exact path=\"/\" component={Home} /> */}\n\n        <PrivateRoute path=\"/dashboard\" component={FetcherMQTT} />\n        <PublicRoute path=\"/\" component={Login} />\n      </Switch>\n    </Router>\n  );\n}\nexport default App;\n","/mnt/d/Desktop/WIP/home-automation/client/src/theme/theme.js",[],"/mnt/d/Desktop/WIP/home-automation/client/src/components/TemperatureHumidityCard.js",[],"/mnt/d/Desktop/WIP/home-automation/client/src/components/RelayCard.js",["117"],"import React, { useEffect, useState, useRef } from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Card from \"@material-ui/core/Card\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport Typography from \"@material-ui/core/Typography\";\nimport CardMedia from \"@material-ui/core/CardMedia\";\nimport Switch from \"@material-ui/core/Switch\";\nimport mqttService from \"../utils/MQTT\";\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\n\nimport lightBulbOpen from \"../assets/lightbulb-open2.svg\";\nimport lightBulbClosed from \"../assets/lightbulb-closed2.svg\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    minWidth: 122,\n    display: \"flex\",\n  },\n  title: {\n    fontSize: 14,\n  },\n  pos: {\n    marginBottom: 12,\n  },\n  media: {\n    // marginLeft: theme.spacing(2),\n    width: 122,\n    height: 122,\n    margin: theme.spacing(2),\n  },\n  degrees: {\n    textAlign: \"center\",\n  },\n  circularProgress: {\n    display: \"inline\",\n    \"& > * + *\": {\n      marginLeft: theme.spacing(2),\n    },\n  },\n}));\n\nexport default function OutlinedCard(props) {\n  const classes = useStyles();\n  const [relayState, setRelayState] = useState(\"Loading State...\");\n  const switchValue = relayState === \"ON\" ? true : false;\n  const [spinnerState, setSpinnerState] = useState({\n    spinner: false,\n    disabled: true,\n  });\n\n  const onChangeHandler = (ev) => {\n    const client = mqttService.getClient();\n    console.log(client, props.command);\n    if (ev.target.checked) {\n      mqttService.publishMessage(client, props.command, \"ON\");\n    } else {\n      mqttService.publishMessage(client, props.command, \"OFF\");\n    }\n\n    setSpinnerState({ spinner: true, disabled: true });\n  };\n\n  useEffect(() => {\n    const client = mqttService.getClient();\n\n    const messageHandler = (topic, payload, packet) => {\n      console.log(payload.toString(), topic);\n      if (topic === props.topic) {\n        setRelayState(payload.toString());\n        setSpinnerState({ spinner: false, disabled: false });\n      }\n    };\n\n    client.on(\"message\", messageHandler);\n\n    return () => {\n      console.log(\"unmounting relay\");\n      client.off(\"message\", messageHandler);\n    };\n  }, [props.topic]);\n  return (\n    <Card className={classes.root} variant=\"outlined\">\n      {/* <CardHeader title=\"Sensor\" /> */}\n\n      <CardContent>\n        <Typography className={classes.title} color=\"secondary\" gutterBottom>\n          {props.roomName}\n        </Typography>\n        <Typography variant=\"h5\" component=\"h2\">\n          {props.name}\n        </Typography>\n        <Typography variant=\"h5\" component=\"h2\">\n          {\"Current State: \"}\n          {relayState}\n        </Typography>\n        <Typography className={classes.pos} color=\"secondary\">\n          {props.device}\n        </Typography>\n        <Switch\n          onChange={onChangeHandler}\n          checked={switchValue}\n          disabled={spinnerState.disabled}\n        />\n        {spinnerState.spinner === true ? (\n          <div className={classes.circularProgress}>\n            <CircularProgress />\n          </div>\n        ) : null}\n      </CardContent>\n      <CardMedia\n        className={classes.media}\n        image={relayState === \"ON\" ? lightBulbOpen : lightBulbClosed}\n        title=\"Lightbulb\"\n      />\n    </Card>\n  );\n}\n","/mnt/d/Desktop/WIP/home-automation/client/src/components/Sensor.js",[],"/mnt/d/Desktop/WIP/home-automation/client/src/components/AlertMessage.js",[],"/mnt/d/Desktop/WIP/home-automation/client/src/components/Sensors.js",[],"/mnt/d/Desktop/WIP/home-automation/client/src/components/Login.js",["118"],"import React, { useState } from \"react\";\nimport Avatar from \"@material-ui/core/Avatar\";\nimport Button from \"@material-ui/core/Button\";\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Paper from \"@material-ui/core/Paper\";\nimport Box from \"@material-ui/core/Box\";\nimport Grid from \"@material-ui/core/Grid\";\nimport LockOutlinedIcon from \"@material-ui/icons/LockOutlined\";\nimport Typography from \"@material-ui/core/Typography\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport axios from \"axios\";\nimport { setUserSession } from \"../utils/Common\";\nimport SideImg from \"../assets/home-automation3.svg\";\n\nfunction Copyright() {\n  return (\n    <Typography variant=\"body2\" color=\"textSecondary\" align=\"center\">\n      {\"Copyright © \"}\n      {\"Home Automation \"}\n      {new Date().getFullYear()}\n      {\".\"}\n    </Typography>\n  );\n}\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    height: \"100vh\",\n  },\n  image: {\n    backgroundImage: `url(${SideImg})`,\n    backgroundRepeat: \"no-repeat\",\n    backgroundColor:\n      theme.palette.type === \"light\"\n        ? theme.palette.grey[50]\n        : theme.palette.grey[900],\n    backgroundSize: \"cover\",\n    backgroundPosition: \"center\",\n  },\n  paper: {\n    margin: theme.spacing(8, 4),\n    display: \"flex\",\n    flexDirection: \"column\",\n    alignItems: \"center\",\n  },\n  avatar: {\n    margin: theme.spacing(1),\n    backgroundColor: theme.palette.secondary.main,\n  },\n  form: {\n    width: \"100%\", // Fix IE 11 issue.\n    marginTop: theme.spacing(1),\n  },\n  submit: {\n    margin: theme.spacing(3, 0, 2),\n  },\n}));\n\nexport default function SignInSide(props) {\n  const classes = useStyles();\n  const username = useFormInput(\"\");\n  const password = useFormInput(\"\");\n\n  const [error, setError] = useState(null);\n  const [loading, setLoading] = useState(false);\n\n  // handle button click of login form\n  const handleLogin = () => {\n    setError(null);\n    setLoading(true);\n\n    axios\n      .post(\"http://192.168.1.66:5000/api/users/signin\", {\n        username: username.value,\n        password: password.value,\n      })\n      .then((response) => {\n        setLoading(false);\n        setUserSession(response.data.token, response.data.user);\n        props.history.push(\"/dashboard\");\n      })\n      .catch((error) => {\n        console.log(error);\n        setLoading(false);\n        if (error.response) {\n          if (error.response.status === 401 || error.response.status === 400) {\n            setError(error.response.data.message);\n          }\n        } else setError(\"Something went wrong. Please try again later.\");\n      });\n  };\n\n  return (\n    <Grid container component=\"main\" className={classes.root}>\n      <CssBaseline />\n      <Grid item xs={false} sm={4} md={7} className={classes.image} />\n      <Grid item xs={12} sm={8} md={5} component={Paper} elevation={6} square>\n        <div className={classes.paper}>\n          <Avatar className={classes.avatar}>\n            <LockOutlinedIcon />\n          </Avatar>\n          <Typography component=\"h1\" variant=\"h5\">\n            Sign in\n          </Typography>\n          <form className={classes.form} noValidate>\n            <TextField\n              variant=\"filled\"\n              color=\"secondary\"\n              margin=\"normal\"\n              required\n              fullWidth\n              id=\"username\"\n              label=\"Username\"\n              name=\"username\"\n              autoComplete=\"username\"\n              autoFocus\n              onChange={username.onChange}\n            />\n            <TextField\n              variant=\"filled\"\n              color=\"secondary\"\n              margin=\"normal\"\n              required\n              fullWidth\n              name=\"password\"\n              label=\"Password\"\n              type=\"password\"\n              id=\"password\"\n              autoComplete=\"current-password\"\n              onChange={password.onChange}\n            />\n            {error && (\n              <>\n                <small style={{ color: \"red\" }}>{error}</small>\n                <br />\n              </>\n            )}\n            <Button\n              type=\"button\"\n              fullWidth\n              variant=\"contained\"\n              color=\"primary\"\n              className={classes.submit}\n              onClick={handleLogin}\n            >\n              Sign In\n            </Button>\n            <Box mt={5}>\n              <Copyright />\n            </Box>\n          </form>\n        </div>\n      </Grid>\n    </Grid>\n  );\n}\n\nconst useFormInput = (initialValue) => {\n  const [value, setValue] = useState(initialValue);\n\n  const handleChange = (e) => {\n    setValue(e.target.value);\n  };\n  return {\n    value,\n    onChange: handleChange,\n  };\n};\n","/mnt/d/Desktop/WIP/home-automation/client/src/utils/Common.js",[],"/mnt/d/Desktop/WIP/home-automation/client/src/utils/PublicRoute.js",[],"/mnt/d/Desktop/WIP/home-automation/client/src/utils/PrivateRoute.js",[],"/mnt/d/Desktop/WIP/home-automation/client/src/components/DialogFilterBy.js",["119"],"import React from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Avatar from \"@material-ui/core/Avatar\";\nimport List from \"@material-ui/core/List\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport ListItemIcon from \"@material-ui/core/ListItemIcon\";\nimport ListItemAvatar from \"@material-ui/core/ListItemAvatar\";\nimport ListItemText from \"@material-ui/core/ListItemText\";\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport MeetingRoomIcon from \"@material-ui/icons/MeetingRoom\";\nimport DeviceHubIcon from \"@material-ui/icons/DeviceHub\";\nimport Typography from \"@material-ui/core/Typography\";\nimport RoomIcon from \"@material-ui/icons/Room\";\nimport CategoryIcon from \"@material-ui/icons/Category\";\nconst capitalize = (s) => {\n  return s && s[0].toUpperCase() + s.slice(1);\n};\n\nconst useStyles = makeStyles((theme) => ({\n  avatar: {\n    margin: theme.spacing(1),\n    backgroundColor: theme.palette.secondary.main,\n  },\n  dialogPaper: {\n    // minWidth: \"30vh\",\n  },\n  emptyContentLabel: {\n    margin:36,\n  },\n}));\n\nfunction SimpleDialog(props) {\n  const classes = useStyles();\n  const { onClose, selectedValue, open } = props;\n\n  const handleClose = () => {\n    onClose(undefined);\n  };\n\n  const handleListItemClick = (value) => {\n    onClose(value.toLowerCase());\n  };\n\n  return (\n    <Dialog\n      classes={{ paper: classes.dialogPaper }}\n      onClose={handleClose}\n      aria-labelledby=\"simple-dialog-title\"\n      open={open}\n    >\n      <DialogTitle id=\"simple-dialog-title\">{props.name}</DialogTitle>\n      {props.contents.length !== 0 ? (\n        <List>\n          {props.contents.map((item) => {\n            return (\n              <ListItem\n                button\n                onClick={() => handleListItemClick(item)}\n                key={item}\n              >\n                <ListItemAvatar>\n                  <Avatar className={classes.avatar}>\n                    {props.type === \"room\" ? (\n                      <MeetingRoomIcon />\n                    ) : (\n                      <DeviceHubIcon />\n                    )}\n                  </Avatar>\n                </ListItemAvatar>\n                <ListItemText primary={capitalize(item)} />\n              </ListItem>\n            );\n          })}\n        </List>\n      ) : (\n        <Typography\n          variant=\"body1\"\n          color=\"secondary\"\n          align=\"center\"\n          className={classes.emptyContentLabel}\n        >\n          {\"No \"}\n          {props.name}\n          {\" found.\"}\n        </Typography>\n      )}\n    </Dialog>\n  );\n}\n\nexport default function SimpleDialogDemo(props) {\n  const [open, setOpen] = React.useState(false);\n  const [selectedValue, setSelectedValue] = React.useState(undefined);\n\n  const handleClickOpen = () => {\n    setOpen(true);\n  };\n\n  const handleClose = (value) => {\n    setOpen(false);\n    setSelectedValue(value);\n    if (value) {\n      props.selectItem({ selected: value, type: props.type });\n    }\n  };\n\n  return (\n    <div>\n      <ListItem button onClick={handleClickOpen}>\n        <ListItemIcon>\n          {props.type === \"room\" ? <RoomIcon color=\"primary\"/> : <CategoryIcon color=\"primary\"/>}\n        </ListItemIcon>\n        <ListItemText primary={props.name} />\n      </ListItem>\n      <SimpleDialog\n        name={props.name}\n        type={props.type}\n        contents={props.contents}\n        selectedValue={selectedValue}\n        open={open}\n        onClose={handleClose}\n      />\n    </div>\n  );\n}\n","/mnt/d/Desktop/WIP/home-automation/client/src/components/DashboardExample.js",[],"/mnt/d/Desktop/WIP/home-automation/client/src/components/FetcherMQTTExample.js",[],"/mnt/d/Desktop/WIP/home-automation/client/src/utils/MQTT.js",[],"/mnt/d/Desktop/WIP/home-automation/client/src/components/Menu.js",[],"/mnt/d/Desktop/WIP/home-automation/client/src/components/Actions.js",["120"],"import React from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport CollapsibleTable from \"./CollapsibleTable\";\nimport TimerActionDialog from \"./TimerActionDialog\";\nimport ActionCard from \"./ActionCard\";\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    \"& > *\": {\n      margin: theme.spacing(1),\n    },\n  },\n}));\n\nexport default function MaterialUIPickers(props) {\n  const classes = useStyles();\n\n  return (\n    <div className={classes.root}>\n      <ActionCard />\n      {/* <CollapsibleTable /> */}\n      <TimerActionDialog sensors={props.sensors} />\n    </div>\n  );\n}\n","/mnt/d/Desktop/WIP/home-automation/client/src/components/CollapsibleTable.js",["121"],"import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Box from \"@material-ui/core/Box\";\nimport Collapse from \"@material-ui/core/Collapse\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport Table from \"@material-ui/core/Table\";\nimport TableBody from \"@material-ui/core/TableBody\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport TableContainer from \"@material-ui/core/TableContainer\";\nimport TableHead from \"@material-ui/core/TableHead\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Paper from \"@material-ui/core/Paper\";\nimport KeyboardArrowDownIcon from \"@material-ui/icons/KeyboardArrowDown\";\nimport KeyboardArrowUpIcon from \"@material-ui/icons/KeyboardArrowUp\";\nimport EditIcon from \"@material-ui/icons/Edit\";\nimport DeleteIcon from \"@material-ui/icons/Delete\";\nconst useRowStyles = makeStyles({\n  root: {\n    \"& > *\": {\n      borderBottom: \"unset\",\n    },\n  },\n});\n\nfunction createData(name, calories, fat, carbs, protein, price) {\n  return {\n    name,\n    calories,\n    fat,\n    carbs,\n    protein,\n    price,\n    history: [\n      { date: \"2020-01-05\", customerId: \"11091700\", amount: 3 },\n      { date: \"2020-01-02\", customerId: \"Anonymous\", amount: 1 },\n    ],\n  };\n}\n\nconst date = new Date();\n\nfunction Row(props) {\n  const { row } = props;\n  const [open, setOpen] = React.useState(false);\n  const classes = useRowStyles();\n\n  return (\n    <React.Fragment>\n      <TableRow className={classes.root}>\n        <TableCell>\n          <IconButton\n            aria-label=\"expand row\"\n            size=\"small\"\n            onClick={() => setOpen(!open)}\n          >\n            {open ? <KeyboardArrowUpIcon color=\"primary\"/> : <KeyboardArrowDownIcon color=\"primary\"/>}\n          </IconButton>\n        </TableCell>\n        <TableCell component=\"th\" scope=\"row\">\n          {row.name}\n        </TableCell>\n        <TableCell align=\"center\">{row.calories}</TableCell>\n        <TableCell align=\"center\">{row.fat}</TableCell>\n        <TableCell align=\"center\">{row.carbs}</TableCell>\n        <TableCell align=\"center\">{row.protein}</TableCell>\n        <TableCell align=\"center\">{row.price}</TableCell>\n        <TableCell align=\"center\">\n          <IconButton edge=\"start\" color=\"primary\" aria-label=\"open drawer\">\n            <DeleteIcon />\n          </IconButton>\n        </TableCell>\n      </TableRow>\n      <TableRow>\n        <TableCell style={{ paddingBottom: 0, paddingTop: 0 }} colSpan={6}>\n          <Collapse in={open} timeout=\"auto\" unmountOnExit>\n            <Box margin={1}>\n              <Typography variant=\"h6\" gutterBottom component=\"div\">\n                Scheduled Action\n              </Typography>\n\n              <Table size=\"small\" aria-label=\"purchases\">\n                <TableHead>\n                  <TableRow>\n                    <TableCell>Date</TableCell>\n                    <TableCell>Time</TableCell>\n                    <TableCell>Repeat</TableCell>\n\n                  </TableRow>\n                </TableHead>\n                <TableBody>\n                  {row.history.map((historyRow) => (\n                    <TableRow key={historyRow.date}>\n                      <TableCell component=\"th\" scope=\"row\">\n                        {date.toLocaleDateString()}\n                      </TableCell>\n                      <TableCell>{date.toLocaleTimeString()}</TableCell>\n                      <TableCell>{\"Every 30 seconds\"}</TableCell>\n\n                    </TableRow>\n                  ))}\n                </TableBody>\n              </Table>\n            </Box>\n          </Collapse>\n        </TableCell>\n      </TableRow>\n    </React.Fragment>\n  );\n}\n\nRow.propTypes = {\n  row: PropTypes.shape({\n    calories: PropTypes.number.isRequired,\n    carbs: PropTypes.number.isRequired,\n    fat: PropTypes.number.isRequired,\n    history: PropTypes.arrayOf(\n      PropTypes.shape({\n        amount: PropTypes.number.isRequired,\n        customerId: PropTypes.string.isRequired,\n        date: PropTypes.string.isRequired,\n      })\n    ).isRequired,\n    name: PropTypes.string.isRequired,\n    price: PropTypes.number.isRequired,\n    protein: PropTypes.number.isRequired,\n  }).isRequired,\n};\n\nconst rows = [\n  createData(\"Scheduled\", \"Turn on\",\"Lightbulb\", \"livingroom\" , \"lr-NodeMCU\", \"Online\"),\n];\n\nexport default function CollapsibleTable() {\n  return (\n    <TableContainer component={Paper}>\n      <Table aria-label=\"collapsible table\">\n        <TableHead>\n          <TableRow>\n            <TableCell />\n            <TableCell>Action</TableCell>\n            <TableCell align=\"center\">Command</TableCell>\n            <TableCell align=\"center\">Sensor</TableCell>\n            <TableCell align=\"center\">Room</TableCell>\n            <TableCell align=\"center\">Device</TableCell>\n            <TableCell align=\"center\">Status</TableCell>\n            <TableCell align=\"center\">Delete</TableCell>\n          </TableRow>\n        </TableHead>\n        <TableBody>\n          {rows.map((row) => (\n            <Row key={row.name} row={row} />\n          ))}\n        </TableBody>\n      </Table>\n    </TableContainer>\n  );\n}\n","/mnt/d/Desktop/WIP/home-automation/client/src/components/SelectSensorMenu.js",["122","123"],"import React from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport InputLabel from \"@material-ui/core/InputLabel\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport FormControl from \"@material-ui/core/FormControl\";\nimport Select from \"@material-ui/core/Select\";\nimport RouterIcon from \"@material-ui/icons/Router\";\nimport RoomIcon from \"@material-ui/icons/Room\";\nimport BlurCircularIcon from \"@material-ui/icons/BlurCircular\";\n\nimport Typography from '@material-ui/core/Typography';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\n\n\nconst useStyles = makeStyles((theme) => ({\n  button: {\n    display: \"block\",\n    marginTop: theme.spacing(2),\n  },\n  formControl: {\n    // margin: theme.spacing(1),\n    minWidth: 120,\n  },\n  menuItem: {\n    padding: theme.spacing(1),\n    display: \"flex\"\n  },\n}));\n\nexport default function ControlledOpenSelect(props) {\n  const classes = useStyles();\n  const [selectedSensor, setSelectedSensor] = React.useState(\"\");\n  const [open, setOpen] = React.useState(false);\n\n  const handleChange = (event) => {\n    setSelectedSensor(event.target.value);\n    props.selectSensor(event.target.value);\n  };\n\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  const handleOpen = () => {\n    setOpen(true);\n  };\n\n  let commandSensors = null;\n  if (props.sensors) {\n    commandSensors = props.sensors.filter((sensor) => {\n      return sensor.commandTopic;\n    });\n  }\n\n  // console.log(selectedSensor);\n  return (\n    <div>\n      <FormControl required className={classes.formControl}>\n        <InputLabel id=\"demo-controlled-open-select-label\">Sensor</InputLabel>\n        <Select\n          labelId=\"demo-controlled-open-select-label\"\n          id=\"demo-controlled-open-select\"\n          open={open}\n          onClose={handleClose}\n          onOpen={handleOpen}\n          value={selectedSensor}\n          onChange={handleChange}\n        >\n          <MenuItem value=\"\">\n            <em>None</em>\n          </MenuItem>\n\n          {commandSensors\n            ? commandSensors.map((sensor) => {\n                return (\n                  <MenuItem value={sensor} key={sensor.name}>\n                    {/* <ListItemIcon>\n                      <BlurCircularIcon fontSize=\"small\" />\n                    </ListItemIcon>\n                    <Typography variant=\"inherit\">{sensor.name}</Typography>\n                    <ListItemIcon>\n                      <RoomIcon fontSize=\"small\" />\n                    </ListItemIcon>\n                    <Typography variant=\"inherit\">{sensor.room}</Typography>\n                    <ListItemIcon>\n                      <RouterIcon fontSize=\"small\" />\n                    </ListItemIcon>\n                    <Typography variant=\"inherit\">{sensor.deviceId}</Typography> */}\n                    <BlurCircularIcon />\n                    {\"  \"}\n                    {sensor.name}\n                    {\"  \"}\n                    <RoomIcon />\n                    {\"  \"}\n                    {sensor.room}\n                    {\"  \"}\n                    <RouterIcon />\n                    {\"  \"}\n                    {sensor.deviceId}\n                  </MenuItem>\n                );\n              })\n            : null}\n        </Select>\n      </FormControl>\n    </div>\n  );\n}\n","/mnt/d/Desktop/WIP/home-automation/client/src/components/TimerActionDialog.js",["124"],"import React from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport DialogActions from \"@material-ui/core/DialogActions\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\nimport DateFnsUtils from \"@date-io/date-fns\";\nimport {\n  MuiPickersUtilsProvider,\n  KeyboardTimePicker,\n  KeyboardDatePicker,\n} from \"@material-ui/pickers\";\nimport Button from \"@material-ui/core/Button\";\nimport Fab from \"@material-ui/core/Fab\";\nimport SelectSensorMenu from \"./SelectSensorMenu\";\nimport SelectCommandMenu from \"./SelectCommandMenu\";\nimport SelectRepeatMenu from \"./SelectRepeatMenu\";\nimport AddIcon from \"@material-ui/icons/Add\";\nimport Grid from \"@material-ui/core/Grid\";\nimport axios from \"axios\";\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    \"& > *\": {\n      margin: theme.spacing(1),\n    },\n  },\n  extendedIcon: {\n    marginRight: theme.spacing(1),\n  },\n  fab: {\n    position: \"fixed\",\n    bottom: theme.spacing(2),\n    right: theme.spacing(4),\n  },\n  picker: {\n    padding: theme.spacing(1),\n    // alignItems: \"center\",\n    // justifyContent: \"center\",\n    // display: \"flex\"\n  },\n  cancelButton: {\n    marginRight: theme.spacing(1),\n  },\n}));\nexport default function TimerActionDialog(props) {\n  const classes = useStyles();\n  const [open, setOpen] = React.useState(false);\n  const [selectedDate, setSelectedDate] = React.useState(new Date());\n  const [selectedSensor, setSelectedSensor] = React.useState(\"\");\n  const [selectedCommand, setSelectedCommand] = React.useState(\"\");\n  const [selectedRecurrence, setSelectedRecurrence] = React.useState(\"\");\n  const [selectedTimeUnits, setSelectedTimeUnits] = React.useState(\"\");\n\n\n  const [status, setStatus] = React.useState({ message: null, color: null });\n  const [loading, setLoading] = React.useState(false);\n  console.log(selectedDate, selectedSensor, selectedRecurrence);\n\n  const handleDateChange = (date) => {\n    setSelectedDate(date);\n  };\n\n  const handleClickOpen = () => {\n    setOpen(true);\n  };\n\n  const handleClose = () => {\n    setOpen(false);\n    setStatus({ message: null, color: null });\n    setSelectedSensor(\"\");\n    setSelectedCommand(\"\");\n    setSelectedRecurrence(\"\");\n    setSelectedTimeUnits(\"\");\n    setSelectedDate(new Date());\n  };\n\n  const addAction = () => {\n    setStatus({ message: null, color: null });\n    setLoading(true);\n    axios\n      .post(\"http://192.168.1.66:5000/api/actions\", {\n        sensorName: selectedSensor.name,\n        deviceId: selectedSensor.deviceId,\n        roomName: selectedSensor.room,\n        command: selectedCommand,\n        commandTopic: selectedSensor.commandTopic,\n        timestamp: selectedDate,\n        recurrenceTimeUnit: selectedTimeUnits,\n        recurrenceNumber: selectedRecurrence,\n\n      })\n      .then((response) => {\n        setLoading(false);\n        setStatus({ message: \"Action added successfully\", color: \"green\" });\n      })\n      .catch((error) => {\n        if (error.response) {\n          console.log(error.response.data.message);\n          setStatus({ message: error.response.data.message, color: \"red\" });\n        }\n        setLoading(false);\n      });\n  };\n\n  return (\n    <div className={classes.root}>\n      <Fab\n        color=\"primary\"\n        aria-label=\"add\"\n        onClick={handleClickOpen}\n        className={classes.fab}\n      >\n        <AddIcon />\n      </Fab>\n      <Dialog\n        disableBackdropClick\n        disableEscapeKeyDown\n        open={open}\n        onClose={handleClose}\n      >\n        <DialogTitle>Schedule an action</DialogTitle>\n        <DialogContent dividers>\n          <div className={classes.picker}>\n            <SelectSensorMenu\n              sensors={props.sensors}\n              selectSensor={setSelectedSensor}\n            />\n          </div>\n          {selectedSensor === \"\" ? null : (\n            <div className={classes.picker}>\n              <SelectCommandMenu\n                type={selectedSensor.type}\n                selectCommand={setSelectedCommand}\n              />\n            </div>\n          )}\n          <MuiPickersUtilsProvider utils={DateFnsUtils}>\n            {/* <Grid container justify=\"space-around\"> */}\n            <div className={classes.picker}>\n              <KeyboardDatePicker\n                margin=\"normal\"\n                id=\"date-picker-dialog\"\n                label=\"Starting Date Picker\"\n                format=\"MM/dd/yyyy\"\n                value={selectedDate}\n                onChange={handleDateChange}\n                KeyboardButtonProps={{\n                  \"aria-label\": \"change date\",\n                }}\n              />\n            </div>\n            <div className={classes.picker}>\n              <KeyboardTimePicker\n                margin=\"normal\"\n                id=\"time-picker\"\n                label=\"Starting Time Picker\"\n                value={selectedDate}\n                onChange={handleDateChange}\n                KeyboardButtonProps={{\n                  \"aria-label\": \"change time\",\n                }}\n              />\n            </div>\n            {/* </Grid> */}\n          </MuiPickersUtilsProvider>\n          <SelectRepeatMenu selectRecurrence={setSelectedRecurrence} selectTimeUnits={setSelectedTimeUnits}/>\n          {status.message && (\n            <>\n              <small style={{ color: status.color }}>{status.message}</small>\n              <br />\n            </>\n          )}\n        </DialogContent>\n        <DialogActions>\n          {loading === true ? (\n            <CircularProgress />\n          ) : (\n            <div>\n              <Button\n                className={classes.cancelButton}\n                variant=\"contained\"\n                onClick={handleClose}\n                color=\"primary\"\n              >\n                Cancel\n              </Button>\n              <Button variant=\"contained\" onClick={addAction} color=\"primary\">\n                Add Action\n              </Button>\n            </div>\n          )}\n        </DialogActions>\n      </Dialog>\n    </div>\n  );\n}\n","/mnt/d/Desktop/WIP/home-automation/client/src/components/SelectCommandMenu.js",[],"/mnt/d/Desktop/WIP/home-automation/client/src/components/SelectRepeatMenu.js",["125"],"import React from \"react\";\nimport { makeStyles, withStyles } from \"@material-ui/core/styles\";\nimport InputLabel from \"@material-ui/core/InputLabel\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport FormControl from \"@material-ui/core/FormControl\";\nimport Select from \"@material-ui/core/Select\";\nimport NativeSelect from \"@material-ui/core/NativeSelect\";\nimport InputBase from \"@material-ui/core/InputBase\";\n\nconst BootstrapInput = withStyles((theme) => ({\n  root: {\n    \"label + &\": {\n      marginTop: theme.spacing(3),\n    },\n  },\n  input: {\n    borderRadius: 4,\n    position: \"relative\",\n    backgroundColor: theme.palette.background.paper,\n    border: \"1px solid #ced4da\",\n    fontSize: 16,\n    padding: \"10px 26px 10px 12px\",\n    transition: theme.transitions.create([\"border-color\", \"box-shadow\"]),\n  },\n}))(InputBase);\n\nconst useStyles = makeStyles((theme) => ({\n  margin: {\n    margin: theme.spacing(1),\n  },\n}));\n\nexport default function CustomizedSelects(props) {\n  const classes = useStyles();\n  const [recurrence, setRecurrence] = React.useState(\"\");\n  const [timeUnits, setTimeUnits] = React.useState(\"\");\n  console.log(recurrence);\n  const handleChange = (event) => {\n    setTimeUnits(event.target.value);\n    props.selectTimeUnits(event.target.value);\n  };\n\n  const handleInput = (event) => {\n    setRecurrence(event.target.value);\n    props.selectRecurrence(event.target.value);\n  };\n  return (\n    <div>\n      <FormControl className={classes.margin} focused>\n        <InputLabel htmlFor=\"demo-customized-textbox\">\n          Recurrence every\n        </InputLabel>\n        <BootstrapInput\n          type=\"number\"\n          id=\"demo-customized-textbox\"\n          value={recurrence}\n          onChange={handleInput}\n        />\n      </FormControl>\n      <FormControl className={classes.margin} focused>\n        <InputLabel id=\"demo-customized-select-label\">Units</InputLabel>\n        <Select\n          labelId=\"demo-customized-select-label\"\n          id=\"demo-customized-select\"\n          value={timeUnits}\n          onChange={handleChange}\n          input={<BootstrapInput />}\n        >\n          <MenuItem value=\"\">\n            <em>None</em>\n          </MenuItem>\n          <MenuItem value={\"Minutes\"}>Minutes</MenuItem>\n          <MenuItem value={\"Hours\"}>Hours</MenuItem>\n          <MenuItem value={\"Days\"}>Days</MenuItem>\n        </Select>\n      </FormControl>\n    </div>\n  );\n}\n","/mnt/d/Desktop/WIP/home-automation/client/src/components/ActionCard.js",[],{"ruleId":"126","replacedBy":"127"},{"ruleId":"128","replacedBy":"129"},{"ruleId":"130","severity":1,"message":"131","line":5,"column":18,"nodeType":"132","messageId":"133","endLine":5,"endColumn":23},{"ruleId":"130","severity":1,"message":"134","line":9,"column":8,"nodeType":"132","messageId":"133","endLine":9,"endColumn":17},{"ruleId":"130","severity":1,"message":"135","line":1,"column":38,"nodeType":"132","messageId":"133","endLine":1,"endColumn":44},{"ruleId":"130","severity":1,"message":"136","line":66,"column":10,"nodeType":"132","messageId":"133","endLine":66,"endColumn":17},{"ruleId":"130","severity":1,"message":"137","line":35,"column":20,"nodeType":"132","messageId":"133","endLine":35,"endColumn":33},{"ruleId":"130","severity":1,"message":"138","line":3,"column":8,"nodeType":"132","messageId":"133","endLine":3,"endColumn":24},{"ruleId":"130","severity":1,"message":"139","line":17,"column":8,"nodeType":"132","messageId":"133","endLine":17,"endColumn":16},{"ruleId":"130","severity":1,"message":"140","line":11,"column":8,"nodeType":"132","messageId":"133","endLine":11,"endColumn":18},{"ruleId":"130","severity":1,"message":"141","line":12,"column":8,"nodeType":"132","messageId":"133","endLine":12,"endColumn":20},{"ruleId":"130","severity":1,"message":"142","line":19,"column":8,"nodeType":"132","messageId":"133","endLine":19,"endColumn":12},{"ruleId":"130","severity":1,"message":"143","line":7,"column":8,"nodeType":"132","messageId":"133","endLine":7,"endColumn":20},"no-native-reassign",["144"],"no-negated-in-lhs",["145"],"no-unused-vars","'Route' is defined but never used.","Identifier","unusedVar","'Dashboard' is defined but never used.","'useRef' is defined but never used.","'loading' is assigned a value but never used.","'selectedValue' is assigned a value but never used.","'CollapsibleTable' is defined but never used.","'EditIcon' is defined but never used.","'Typography' is defined but never used.","'ListItemIcon' is defined but never used.","'Grid' is defined but never used.","'NativeSelect' is defined but never used.","no-global-assign","no-unsafe-negation"]