[{"/mnt/d/Desktop/WIP/home-automation/client/src/index.js":"1","/mnt/d/Desktop/WIP/home-automation/client/src/reportWebVitals.js":"2","/mnt/d/Desktop/WIP/home-automation/client/src/App.js":"3","/mnt/d/Desktop/WIP/home-automation/client/src/components/HorizontalNav2.js":"4","/mnt/d/Desktop/WIP/home-automation/client/src/theme/theme.js":"5","/mnt/d/Desktop/WIP/home-automation/client/src/components/TemperatureHumidityCard.js":"6","/mnt/d/Desktop/WIP/home-automation/client/src/components/RelayCard.js":"7","/mnt/d/Desktop/WIP/home-automation/client/src/components/MQTT.js":"8","/mnt/d/Desktop/WIP/home-automation/client/src/components/Sensor.js":"9","/mnt/d/Desktop/WIP/home-automation/client/src/components/AlertMessage.js":"10","/mnt/d/Desktop/WIP/home-automation/client/src/components/FetcherMQTT.js":"11","/mnt/d/Desktop/WIP/home-automation/client/src/components/Sensors.js":"12","/mnt/d/Desktop/WIP/home-automation/client/src/components/MiddleBar.js":"13","/mnt/d/Desktop/WIP/home-automation/client/src/components/FilterByButton.js":"14"},{"size":678,"mtime":1608134068832,"results":"15","hashOfConfig":"16"},{"size":362,"mtime":1607907510898,"results":"17","hashOfConfig":"16"},{"size":264,"mtime":1609715508395,"results":"18","hashOfConfig":"16"},{"size":5193,"mtime":1609868198424,"results":"19","hashOfConfig":"16"},{"size":1148,"mtime":1608324676282,"results":"20","hashOfConfig":"16"},{"size":1715,"mtime":1608574920456,"results":"21","hashOfConfig":"16"},{"size":1756,"mtime":1608587946673,"results":"22","hashOfConfig":"16"},{"size":1913,"mtime":1608589288343,"results":"23","hashOfConfig":"16"},{"size":1176,"mtime":1608476864024,"results":"24","hashOfConfig":"16"},{"size":1385,"mtime":1608679723622,"results":"25","hashOfConfig":"16"},{"size":4710,"mtime":1609785663707,"results":"26","hashOfConfig":"16"},{"size":739,"mtime":1609867446027,"results":"27","hashOfConfig":"16"},{"size":2413,"mtime":1609867819677,"results":"28","hashOfConfig":"16"},{"size":1543,"mtime":1609865823417,"results":"29","hashOfConfig":"16"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},"jkh3hr",{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53","usedDeprecatedRules":"32"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},"/mnt/d/Desktop/WIP/home-automation/client/src/index.js",[],["60","61"],"/mnt/d/Desktop/WIP/home-automation/client/src/reportWebVitals.js",[],"/mnt/d/Desktop/WIP/home-automation/client/src/App.js",[],"/mnt/d/Desktop/WIP/home-automation/client/src/components/HorizontalNav2.js",[],"/mnt/d/Desktop/WIP/home-automation/client/src/theme/theme.js",[],"/mnt/d/Desktop/WIP/home-automation/client/src/components/TemperatureHumidityCard.js",[],"/mnt/d/Desktop/WIP/home-automation/client/src/components/RelayCard.js",[],"/mnt/d/Desktop/WIP/home-automation/client/src/components/MQTT.js",[],"/mnt/d/Desktop/WIP/home-automation/client/src/components/Sensor.js",[],"/mnt/d/Desktop/WIP/home-automation/client/src/components/AlertMessage.js",[],"/mnt/d/Desktop/WIP/home-automation/client/src/components/FetcherMQTT.js",["62"],"import axios from \"axios\";\nimport mqttService from \"./MQTT\";\nimport React, { useEffect, useState, useRef } from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { Switch, Route } from \"react-router-dom\";\nimport AlertMessage from \"./AlertMessage\";\nimport HorizontalNav2 from \"./HorizontalNav2\";\nimport MiddleBar from \"./MiddleBar\";\n// import { Typography } from \"@material-ui/core\";\n\nconst URL = \"http://192.168.1.66:5000/active-sensors\";\n\nconst useStyles = makeStyles((theme) => ({\n  container: {\n    paddingTop: theme.spacing(4),\n    paddingBottom: theme.spacing(4),\n  },\n  appBarSpacer: theme.mixins.toolbar,\n}));\n\nconst FetcherΜQTT = () => {\n  const classes = useStyles();\n\n  const [data, setData] = useState({ sensors: [] });\n  const dataRef = useRef(data);\n\n  useEffect(() => {\n    const fetchDevices = async () => {\n      try {\n        // setData({ sensors: data.sensors, isFetching: true });\n        const response = await axios.get(URL);\n        setData({ sensors: response.data });\n        for (const sensor of response.data) {\n          // console.log(sensor)\n          if (sensor.type === \"temperature-humidity\") {\n            sensor.room = \"kitchen\";\n          }\n        }\n        dataRef.current = { sensors: response.data };\n\n        for (const sensor of response.data) {\n          mqttService.subscribe(client, sensor.pubTopic);\n        }\n      } catch (error) {\n        console.log(error);\n        setData({ sensors: [] });\n      }\n    };\n\n    fetchDevices();\n\n    const messageHandler = (client, topic, payload) => {\n      if (topic === \"browser\") {\n        const infoObj = JSON.parse(payload.toString());\n        if (infoObj.action === \"disconnected\") {\n          const newData = {\n            sensors: dataRef.current.sensors.filter((sensor) => {\n              if (sensor.deviceId === infoObj.deviceId) {\n                mqttService.unsubscribe(client, sensor.pubTopic);\n              }\n              return sensor.deviceId !== infoObj.deviceId;\n            }),\n            alertMessage: {\n              // show: true,\n              device: infoObj.deviceId,\n              reason: infoObj.action,\n            },\n          };\n          dataRef.current = newData;\n          setData(newData);\n        } else if (infoObj.action === \"connected\") {\n          const existingSensor = dataRef.current.sensors.find(\n            (el) => el.deviceId === infoObj.newSensors[0].deviceId\n          );\n          if (existingSensor) {\n            console.log(\"Exists!!! No action taken!\");\n            return;\n          } else {\n            const newData = {\n              sensors: dataRef.current.sensors.concat(infoObj.newSensors),\n              alertMessage: {\n                // show: true,\n                device: infoObj.newSensors[0].deviceId,\n                reason: infoObj.action,\n              },\n            };\n            for (const sensor of infoObj.newSensors) {\n              mqttService.subscribe(client, sensor.pubTopic);\n            }\n            dataRef.current = newData;\n            setData(newData);\n          }\n        }\n        return;\n      }\n      const message = payload.toString();\n\n      const newData = {\n        sensors: dataRef.current.sensors.map((sensorItem) => {\n          // console.log(\"SensorItem\", sensorItem);\n\n          if (sensorItem.pubTopic === topic) {\n            if (sensorItem.type === \"temperature-humidity\") {\n              const splitStr = message.split(\"-\");\n              sensorItem.currentMeasurement = {\n                temperature: splitStr[0],\n                humidity: splitStr[1],\n                // timestamp: getFixedDate(),\n              };\n            }\n          }\n          return sensorItem;\n        }),\n      };\n      dataRef.current = newData;\n      setData(newData);\n    };\n\n    const client = mqttService.getClient(() => {});\n\n    mqttService.onMessage(client, (client, topic, payload) =>\n      messageHandler(client, topic, payload)\n    );\n  }, []);\n\n  // const rooms = [...new Set(data.sensors.map((sensor) => sensor.room))];\n  return (\n    <main>\n      <HorizontalNav2\n        content={{\n          brand: {\n            text: \"Home Automation\",\n            // image: {Logo},\n            image:\n              \"https://www.flaticon.com/svg/static/icons/svg/3063/3063654.svg\",\n            width: \"110\",\n          },\n          link3: \"Actions\",\n          link4: \"User\",\n          \"primary-action\": \"Log Out\",\n        }}\n      />\n      {/* <div className={classes.appBarSpacer} /> */}\n      <AlertMessage alertMessage={data.alertMessage} />\n      <Switch>\n        <Route exact path=\"/\">\n          <MiddleBar sensors={data.sensors} />\n        </Route>\n      </Switch>\n    </main>\n  );\n};\n\nexport default FetcherΜQTT;\n","/mnt/d/Desktop/WIP/home-automation/client/src/components/Sensors.js",[],"/mnt/d/Desktop/WIP/home-automation/client/src/components/MiddleBar.js",[],"/mnt/d/Desktop/WIP/home-automation/client/src/components/FilterByButton.js",[],{"ruleId":"63","replacedBy":"64"},{"ruleId":"65","replacedBy":"66"},{"ruleId":"67","severity":1,"message":"68","line":22,"column":9,"nodeType":"69","messageId":"70","endLine":22,"endColumn":16},"no-native-reassign",["71"],"no-negated-in-lhs",["72"],"no-unused-vars","'classes' is assigned a value but never used.","Identifier","unusedVar","no-global-assign","no-unsafe-negation"]