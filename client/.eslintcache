[{"/mnt/d/Desktop/WIP/home-automation/client/src/index.js":"1","/mnt/d/Desktop/WIP/home-automation/client/src/reportWebVitals.js":"2","/mnt/d/Desktop/WIP/home-automation/client/src/App.js":"3","/mnt/d/Desktop/WIP/home-automation/client/src/components/HorizontalNav2.js":"4","/mnt/d/Desktop/WIP/home-automation/client/src/theme/theme.js":"5","/mnt/d/Desktop/WIP/home-automation/client/src/components/TemperatureHumidityCard.js":"6","/mnt/d/Desktop/WIP/home-automation/client/src/components/RelayCard.js":"7","/mnt/d/Desktop/WIP/home-automation/client/src/components/MQTT.js":"8","/mnt/d/Desktop/WIP/home-automation/client/src/components/Sensor.js":"9","/mnt/d/Desktop/WIP/home-automation/client/src/components/AlertMessage.js":"10","/mnt/d/Desktop/WIP/home-automation/client/src/components/FetcherMQTT.js":"11","/mnt/d/Desktop/WIP/home-automation/client/src/components/Sensors.js":"12","/mnt/d/Desktop/WIP/home-automation/client/src/components/MiddleBar.js":"13","/mnt/d/Desktop/WIP/home-automation/client/src/components/FilterByButton.js":"14","/mnt/d/Desktop/WIP/home-automation/client/src/components/Login.js":"15","/mnt/d/Desktop/WIP/home-automation/client/src/utils/Common.js":"16","/mnt/d/Desktop/WIP/home-automation/client/src/utils/PublicRoute.js":"17","/mnt/d/Desktop/WIP/home-automation/client/src/utils/PrivateRoute.js":"18","/mnt/d/Desktop/WIP/home-automation/client/src/components/Dashboard.js":"19","/mnt/d/Desktop/WIP/home-automation/client/src/components/DialogFilterBy.js":"20","/mnt/d/Desktop/WIP/home-automation/client/src/components/DashboardExample.js":"21","/mnt/d/Desktop/WIP/home-automation/client/src/components/FetcherMQTTExample.js":"22"},{"size":678,"mtime":1608134068832,"results":"23","hashOfConfig":"24"},{"size":362,"mtime":1607907510898,"results":"25","hashOfConfig":"24"},{"size":1401,"mtime":1610294396612,"results":"26","hashOfConfig":"24"},{"size":5559,"mtime":1610053459945,"results":"27","hashOfConfig":"24"},{"size":1148,"mtime":1608324676282,"results":"28","hashOfConfig":"24"},{"size":2398,"mtime":1610323258824,"results":"29","hashOfConfig":"24"},{"size":2560,"mtime":1610323943863,"results":"30","hashOfConfig":"24"},{"size":1918,"mtime":1610325114509,"results":"31","hashOfConfig":"24"},{"size":898,"mtime":1610323640850,"results":"32","hashOfConfig":"24"},{"size":1388,"mtime":1610318909673,"results":"33","hashOfConfig":"24"},{"size":4041,"mtime":1610123774702,"results":"34","hashOfConfig":"24"},{"size":1368,"mtime":1610297843695,"results":"35","hashOfConfig":"24"},{"size":2653,"mtime":1610231068418,"results":"36","hashOfConfig":"24"},{"size":1543,"mtime":1609865823417,"results":"37","hashOfConfig":"24"},{"size":4642,"mtime":1610211932252,"results":"38","hashOfConfig":"24"},{"size":721,"mtime":1610040779360,"results":"39","hashOfConfig":"24"},{"size":455,"mtime":1610046079185,"results":"40","hashOfConfig":"24"},{"size":422,"mtime":1610053266438,"results":"41","hashOfConfig":"24"},{"size":630,"mtime":1610046478377,"results":"42","hashOfConfig":"24"},{"size":3624,"mtime":1610318269180,"results":"43","hashOfConfig":"24"},{"size":8287,"mtime":1610325430839,"results":"44","hashOfConfig":"24"},{"size":3137,"mtime":1610325136518,"results":"45","hashOfConfig":"24"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},"jkh3hr",{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53","usedDeprecatedRules":"48"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56","usedDeprecatedRules":"57"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"72","usedDeprecatedRules":"57"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"57"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"81","usedDeprecatedRules":"48"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"57"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"92","usedDeprecatedRules":"48"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"95","usedDeprecatedRules":"48"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},"/mnt/d/Desktop/WIP/home-automation/client/src/index.js",[],["98","99"],"/mnt/d/Desktop/WIP/home-automation/client/src/reportWebVitals.js",[],"/mnt/d/Desktop/WIP/home-automation/client/src/App.js",["100","101"],"import \"./App.css\";\nimport React, { useEffect, useState } from \"react\";\nimport { BrowserRouter as Router } from \"react-router-dom\";\n\nimport { Switch, Route } from \"react-router-dom\";\nimport Login from \"./components/Login\";\nimport PrivateRoute from \"./utils/PrivateRoute\";\nimport PublicRoute from \"./utils/PublicRoute\";\nimport Dashboard from \"./components/DashboardExample\";\nimport { getToken, removeUserSession, setUserSession } from \"./utils/Common\";\nimport axios from 'axios';\nimport FetcherMQTT from \"./components/FetcherMQTTExample\";\n\nfunction App() {\n  const [authLoading, setAuthLoading] = useState(true);\n\n  useEffect(() => {\n    const token = getToken();\n    if (!token) {\n      return;\n    }\n\n    axios\n      .get(`http://localhost:5000/api/verifyToken?token=${token}`)\n      .then((response) => {\n        setUserSession(response.data.token, response.data.user);\n        setAuthLoading(false);\n      })\n      .catch((error) => {\n        removeUserSession();\n        setAuthLoading(false);\n      });\n  }, []);\n\n  if (authLoading && getToken()) {\n    return <div className=\"content\">Checking Authentication...</div>;\n  }\n  return (\n    <Router>\n      <Switch>\n        {/* <Route exact path=\"/\" component={Home} /> */}\n\n        <PrivateRoute path=\"/dashboard\" component={FetcherMQTT} />\n        <PublicRoute path=\"/\" component={Login} />\n      </Switch>\n    </Router>\n  );\n}\nexport default App;\n","/mnt/d/Desktop/WIP/home-automation/client/src/components/HorizontalNav2.js",["102"],"import React from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\n\nimport AppBar from \"@material-ui/core/AppBar\";\nimport Box from \"@material-ui/core/Box\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport Link from \"@material-ui/core/Link\";\nimport Button from \"@material-ui/core/Button\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport MenuIcon from \"@material-ui/icons/Menu\";\n\nimport Drawer from \"@material-ui/core/Drawer\";\nimport List from \"@material-ui/core/List\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport ListItemIcon from \"@material-ui/core/ListItemIcon\";\nimport ListItemText from \"@material-ui/core/ListItemText\";\nimport DirectionsBusIcon from \"@material-ui/icons/DirectionsBus\";\nimport NotificationImportantIcon from \"@material-ui/icons/NotificationImportant\";\nimport { Link as RouterLink } from \"react-router-dom\";\nimport {withRouter} from 'react-router-dom';\n\nimport { getUser, removeUserSession } from '../utils/Common';\n\nimport Logo from \"../assets/smart-house.svg\";\nconst useStyles = makeStyles((theme) => ({\n  toolbar: {\n    minHeight: 70,\n  },\n  brand: {\n    lineHeight: 1,\n    paddingTop: theme.spacing(1),\n    paddingLeft: theme.spacing(1),\n    marginRight: \"auto\",\n  },\n  link: {\n    marginRight: theme.spacing(5),\n    [theme.breakpoints.down(\"sm\")]: {\n      display: \"none\",\n    },\n  },\n  primaryAction: {\n    [theme.breakpoints.down(\"sm\")]: {\n      display: \"none\",\n    },\n  },\n  menuButton: {\n    [theme.breakpoints.up(\"md\")]: {\n      display: \"none\",\n    },\n  },\n  iconWrapper: {\n    minWidth: 40,\n  },\n  icon: {\n    color: theme.palette.text.hint,\n  },\n  drawerContainer: {\n    paddingTop: theme.spacing(2),\n    paddingLeft: theme.spacing(2),\n    paddingRight: theme.spacing(3),\n    width: 300,\n  },\n}));\n\nfunction Navigation(props) {\n  const classes = useStyles();\n\n  const content = {\n    brand: { image: { Logo }, width: 110 },\n    link3: \"Section Three\",\n    link4: \"Section Four\",\n    \"primary-action\": \"Action\",\n    ...props.content,\n  };\n\n  let brand;\n\n  if (content.brand.image) {\n    brand = (\n      <img src={content.brand.image} alt=\"\" width={content.brand.width} />\n    );\n  } else {\n    brand = content.brand.text || \"\";\n  }\n\n  const [state, setState] = React.useState({ open: false });\n\n  const toggleDrawer = (open) => (event) => {\n    if (\n      event.type === \"keydown\" &&\n      (event.key === \"Tab\" || event.key === \"Shift\")\n    ) {\n      return;\n    }\n\n    setState({ ...state, open });\n  };\n\n  // Logout \n  const user = getUser();\n \n  // handle click event of logout button\n  const handleLogout = () => {\n    removeUserSession();\n    props.history.push('/login');\n  }\n\n\n  return (\n    <AppBar position=\"static\" color=\"inherit\">\n      <Toolbar className={classes.toolbar}>\n        <Link\n          href=\"/\"\n          component={RouterLink}\n          to=\"/\"\n          color=\"primary\"\n          underline=\"none\"\n          variant=\"h5\"\n          className={classes.brand}\n        >\n          {brand}\n        </Link>\n        <Link\n          href=\"#\"\n          color=\"textPrimary\"\n          variant=\"body2\"\n          className={classes.link}\n        >\n          {content[\"link3\"]}\n        </Link>\n        <Link\n          href=\"#\"\n          color=\"textPrimary\"\n          variant=\"body2\"\n          className={classes.link}\n        >\n          {content[\"link4\"]}\n        </Link>\n        <Button\n          variant=\"contained\"\n          color=\"secondary\"\n          className={classes.primaryAction}\n          onClick={handleLogout}\n        >\n          {content[\"primary-action\"]}\n        </Button>\n        <IconButton\n          edge=\"start\"\n          color=\"inherit\"\n          aria-label=\"menu\"\n          className={classes.menuButton}\n          onClick={toggleDrawer(true)}\n        >\n          <MenuIcon />\n        </IconButton>\n      </Toolbar>\n      <Drawer anchor=\"left\" open={state.open} onClose={toggleDrawer(false)}>\n        <div className={classes.drawerContainer}>\n          <Box\n            mb={1}\n            ml={2}\n            pb={2}\n            border={1}\n            borderTop={0}\n            borderLeft={0}\n            borderRight={0}\n            borderColor=\"background.emphasis\"\n          >\n            <Link\n              href=\"#\"\n              color=\"primary\"\n              underline=\"none\"\n              variant=\"h5\"\n              className={classes.linkBrand}\n            >\n              {brand}\n            </Link>\n          </Box>\n          <List>\n            <ListItem button key={content[\"link3\"]}>\n              <ListItemIcon className={classes.iconWrapper}>\n                <DirectionsBusIcon className={classes.icon} />\n              </ListItemIcon>\n              <ListItemText primary={content[\"link3\"]} />\n            </ListItem>\n            <ListItem button key={content[\"link4\"]}>\n              <ListItemIcon className={classes.iconWrapper}>\n                <NotificationImportantIcon className={classes.icon} />\n              </ListItemIcon>\n              <ListItemText primary={content[\"link4\"]} />\n            </ListItem>\n          </List>\n          <Box\n            mt={1}\n            ml={2}\n            pt={3}\n            border={1}\n            borderBottom={0}\n            borderLeft={0}\n            borderRight={0}\n            borderColor=\"background.emphasis\"\n          >\n            <Button onClick={handleLogout} variant=\"contained\" color=\"secondary\" fullWidth>\n              {content[\"primary-action\"]}\n            </Button>\n          </Box>\n        </div>\n      </Drawer>\n    </AppBar>\n  );\n}\n\nexport default withRouter(Navigation);",["103","104"],"/mnt/d/Desktop/WIP/home-automation/client/src/theme/theme.js",[],"/mnt/d/Desktop/WIP/home-automation/client/src/components/TemperatureHumidityCard.js",[],"/mnt/d/Desktop/WIP/home-automation/client/src/components/RelayCard.js",[],"/mnt/d/Desktop/WIP/home-automation/client/src/components/MQTT.js",[],"/mnt/d/Desktop/WIP/home-automation/client/src/components/Sensor.js",[],"/mnt/d/Desktop/WIP/home-automation/client/src/components/AlertMessage.js",[],"/mnt/d/Desktop/WIP/home-automation/client/src/components/FetcherMQTT.js",["105"],"import axios from \"axios\";\nimport mqttService from \"./MQTT\";\nimport React, { useEffect, useState, useRef } from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport AlertMessage from \"./AlertMessage\";\nimport MiddleBar from \"./MiddleBar\";\n\nconst URL = \"http://localhost:5000/active-sensors\";\n\nconst useStyles = makeStyles((theme) => ({\n  container: {\n    paddingTop: theme.spacing(4),\n    paddingBottom: theme.spacing(4),\n  },\n  appBarSpacer: theme.mixins.toolbar,\n}));\n\nconst FetcherΜQTT = () => {\n  const classes = useStyles();\n\n  const [data, setData] = useState({ sensors: [] });\n  const dataRef = useRef(data);\n\n  useEffect(() => {\n    const fetchDevices = async () => {\n      try {\n        // setData({ sensors: data.sensors, isFetching: true });\n        const response = await axios.get(URL);\n        setData({ sensors: response.data });\n        for (const sensor of response.data) {\n          // console.log(sensor)\n          if (sensor.type === \"temperature-humidity\") {\n            sensor.room = \"kitchen\";\n          }\n        }\n        dataRef.current = { sensors: response.data };\n\n        for (const sensor of response.data) {\n          mqttService.subscribe(client, sensor.pubTopic);\n        }\n      } catch (error) {\n        console.log(error);\n        setData({ sensors: [] });\n      }\n    };\n\n    fetchDevices();\n\n    const messageHandler = (client, topic, payload) => {\n      if (topic === \"browser\") {\n        const infoObj = JSON.parse(payload.toString());\n        if (infoObj.action === \"disconnected\") {\n          const newData = {\n            sensors: dataRef.current.sensors.filter((sensor) => {\n              if (sensor.deviceId === infoObj.deviceId) {\n                mqttService.unsubscribe(client, sensor.pubTopic);\n              }\n              return sensor.deviceId !== infoObj.deviceId;\n            }),\n            alertMessage: {\n              // show: true,\n              device: infoObj.deviceId,\n              reason: infoObj.action,\n            },\n          };\n          dataRef.current = newData;\n          setData(newData);\n        } else if (infoObj.action === \"connected\") {\n          const existingSensor = dataRef.current.sensors.find(\n            (el) => el.deviceId === infoObj.newSensors[0].deviceId\n          );\n          if (existingSensor) {\n            console.log(\"Exists!!! No action taken!\");\n            return;\n          } else {\n            const newData = {\n              sensors: dataRef.current.sensors.concat(infoObj.newSensors),\n              alertMessage: {\n                // show: true,\n                device: infoObj.newSensors[0].deviceId,\n                reason: infoObj.action,\n              },\n            };\n            for (const sensor of infoObj.newSensors) {\n              mqttService.subscribe(client, sensor.pubTopic);\n            }\n            dataRef.current = newData;\n            setData(newData);\n          }\n        }\n        return;\n      }\n      const message = payload.toString();\n\n      const newData = {\n        sensors: dataRef.current.sensors.map((sensorItem) => {\n          // console.log(\"SensorItem\", sensorItem);\n\n          if (sensorItem.pubTopic === topic) {\n            if (sensorItem.type === \"temperature-humidity\") {\n              const splitStr = message.split(\"-\");\n              sensorItem.currentMeasurement = {\n                temperature: splitStr[0],\n                humidity: splitStr[1],\n                // timestamp: getFixedDate(),\n              };\n            }\n          }\n          return sensorItem;\n        }),\n      };\n      dataRef.current = newData;\n      setData(newData);\n    };\n\n    const client = mqttService.getClient(() => {});\n\n    mqttService.onMessage(client, (client, topic, payload) =>\n      messageHandler(client, topic, payload)\n    );\n  }, []);\n\n  // const rooms = [...new Set(data.sensors.map((sensor) => sensor.room))];\n  return (\n    <main>\n      <AlertMessage alertMessage={data.alertMessage} />\n      <MiddleBar sensors={data.sensors} />\n    </main>\n  );\n};\n\nexport default FetcherΜQTT;\n","/mnt/d/Desktop/WIP/home-automation/client/src/components/Sensors.js",[],"/mnt/d/Desktop/WIP/home-automation/client/src/components/MiddleBar.js",[],"/mnt/d/Desktop/WIP/home-automation/client/src/components/FilterByButton.js",[],"/mnt/d/Desktop/WIP/home-automation/client/src/components/Login.js",["106"],"import React, { useState } from \"react\";\nimport Avatar from \"@material-ui/core/Avatar\";\nimport Button from \"@material-ui/core/Button\";\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Paper from \"@material-ui/core/Paper\";\nimport Box from \"@material-ui/core/Box\";\nimport Grid from \"@material-ui/core/Grid\";\nimport LockOutlinedIcon from \"@material-ui/icons/LockOutlined\";\nimport Typography from \"@material-ui/core/Typography\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport axios from \"axios\";\nimport { setUserSession } from \"../utils/Common\";\nimport SideImg from \"../assets/bg.jpg\"\n\nfunction Copyright() {\n  return (\n    <Typography variant=\"body2\" color=\"textSecondary\" align=\"center\">\n      {\"Copyright © \"}\n      {\"Home Automation \"}\n      {new Date().getFullYear()}\n      {\".\"}\n    </Typography>\n  );\n}\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    height: \"100vh\",\n  },\n  image: {\n    backgroundImage: `url(${SideImg})`,\n    backgroundRepeat: \"no-repeat\",\n    backgroundColor:\n      theme.palette.type === \"light\"\n        ? theme.palette.grey[50]\n        : theme.palette.grey[900],\n    backgroundSize: \"cover\",\n    backgroundPosition: \"center\",\n  },\n  paper: {\n    margin: theme.spacing(8, 4),\n    display: \"flex\",\n    flexDirection: \"column\",\n    alignItems: \"center\",\n  },\n  avatar: {\n    margin: theme.spacing(1),\n    backgroundColor: theme.palette.secondary.main,\n  },\n  form: {\n    width: \"100%\", // Fix IE 11 issue.\n    marginTop: theme.spacing(1),\n  },\n  submit: {\n    margin: theme.spacing(3, 0, 2),\n  },\n}));\n\nexport default function SignInSide(props) {\n  const classes = useStyles();\n  const username = useFormInput(\"\");\n  const password = useFormInput(\"\");\n\n  const [error, setError] = useState(null);\n  const [loading, setLoading] = useState(false);\n\n  // handle button click of login form\n  const handleLogin = () => {\n    setError(null);\n    setLoading(true);\n\n    axios\n      .post(\"http://localhost:5000/api/users/signin\", {\n        username: username.value,\n        password: password.value,\n      })\n      .then((response) => {\n        setLoading(false);\n        setUserSession(response.data.token, response.data.user);\n        props.history.push(\"/dashboard\");\n      })\n      .catch((error) => {\n        setLoading(false);\n        if (error.response.status === 401 || error.response.status === 400)\n          setError(error.response.data.message);\n        else setError(\"Something went wrong. Please try again later.\");\n      });\n  };\n\n  return (\n    <Grid container component=\"main\" className={classes.root}>\n      <CssBaseline />\n      <Grid item xs={false} sm={4} md={7} className={classes.image} />\n      <Grid item xs={12} sm={8} md={5} component={Paper} elevation={6} square>\n        <div className={classes.paper}>\n          <Avatar className={classes.avatar}>\n            <LockOutlinedIcon />\n          </Avatar>\n          <Typography component=\"h1\" variant=\"h5\">\n            Sign in\n          </Typography>\n          <form className={classes.form} noValidate>\n            <TextField\n              variant=\"outlined\"\n              color=\"secondary\"\n              margin=\"normal\"\n              required\n              fullWidth\n              id=\"username\"\n              label=\"Username\"\n              name=\"username\"\n              autoComplete=\"username\"\n              autoFocus\n              onChange={username.onChange}\n            />\n            <TextField\n              variant=\"outlined\"\n              color=\"secondary\"\n              margin=\"normal\"\n              required\n              fullWidth\n              name=\"password\"\n              label=\"Password\"\n              type=\"password\"\n              id=\"password\"\n              autoComplete=\"current-password\"\n              onChange={password.onChange}\n            />\n            {error && (\n              <>\n                <small style={{ color: \"red\" }}>{error}</small>\n                <br />\n              </>\n            )}\n            <Button\n              type=\"button\"\n              fullWidth\n              variant=\"contained\"\n              color=\"secondary\"\n              className={classes.submit}\n              onClick={handleLogin}\n            >\n              Sign In\n            </Button>\n            <Box mt={5}>\n              <Copyright />\n            </Box>\n          </form>\n        </div>\n      </Grid>\n    </Grid>\n  );\n}\n\nconst useFormInput = (initialValue) => {\n  const [value, setValue] = useState(initialValue);\n\n  const handleChange = (e) => {\n    setValue(e.target.value);\n  };\n  return {\n    value,\n    onChange: handleChange,\n  };\n};\n","/mnt/d/Desktop/WIP/home-automation/client/src/utils/Common.js",[],"/mnt/d/Desktop/WIP/home-automation/client/src/utils/PublicRoute.js",[],"/mnt/d/Desktop/WIP/home-automation/client/src/utils/PrivateRoute.js",[],"/mnt/d/Desktop/WIP/home-automation/client/src/components/Dashboard.js",[],"/mnt/d/Desktop/WIP/home-automation/client/src/components/DialogFilterBy.js",["107"],"import React from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Avatar from \"@material-ui/core/Avatar\";\nimport List from \"@material-ui/core/List\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport ListItemIcon from \"@material-ui/core/ListItemIcon\";\nimport ListItemAvatar from \"@material-ui/core/ListItemAvatar\";\nimport ListItemText from \"@material-ui/core/ListItemText\";\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport MeetingRoomIcon from \"@material-ui/icons/MeetingRoom\";\nimport DeviceHubIcon from \"@material-ui/icons/DeviceHub\";\nimport Typography from \"@material-ui/core/Typography\";\nimport RoomIcon from \"@material-ui/icons/Room\";\nimport CategoryIcon from \"@material-ui/icons/Category\";\nconst capitalize = (s) => {\n  return s && s[0].toUpperCase() + s.slice(1);\n};\n\nconst useStyles = makeStyles((theme) => ({\n  avatar: {\n    margin: theme.spacing(1),\n    backgroundColor: theme.palette.secondary.main,\n  },\n  dialogPaper: {\n    minWidth: \"80vh\",\n  },\n  emptyContentLabel: {\n    marginLeft: 36,\n    marginBottom: 12,\n  },\n}));\n\nfunction SimpleDialog(props) {\n  const classes = useStyles();\n  const { onClose, selectedValue, open } = props;\n\n  const handleClose = () => {\n    onClose(undefined);\n  };\n\n  const handleListItemClick = (value) => {\n    onClose(value.toLowerCase());\n  };\n\n  return (\n    <Dialog\n      classes={{ paper: classes.dialogPaper }}\n      onClose={handleClose}\n      aria-labelledby=\"simple-dialog-title\"\n      open={open}\n    >\n      <DialogTitle id=\"simple-dialog-title\">{props.name}</DialogTitle>\n      {props.contents.length !== 0 ? (\n        <List>\n          {props.contents.map((item) => {\n            return (\n              <ListItem\n                button\n                onClick={() => handleListItemClick(item)}\n                key={item}\n              >\n                <ListItemAvatar>\n                  <Avatar className={classes.avatar}>\n                    {props.type === \"room\" ? (\n                      <MeetingRoomIcon />\n                    ) : (\n                      <DeviceHubIcon />\n                    )}\n                  </Avatar>\n                </ListItemAvatar>\n                <ListItemText primary={capitalize(item)} />\n              </ListItem>\n            );\n          })}\n        </List>\n      ) : (\n        <Typography\n          variant=\"body1\"\n          color=\"secondary\"\n          align=\"left\"\n          className={classes.emptyContentLabel}\n        >\n          {\"No \"}\n          {props.name}\n          {\" found.\"}\n        </Typography>\n      )}\n    </Dialog>\n  );\n}\n\nexport default function SimpleDialogDemo(props) {\n  const [open, setOpen] = React.useState(false);\n  const [selectedValue, setSelectedValue] = React.useState(undefined);\n\n  const handleClickOpen = () => {\n    setOpen(true);\n  };\n\n  const handleClose = (value) => {\n    setOpen(false);\n    setSelectedValue(value);\n    if (value) {\n      props.selectItem({ selected: value, type: props.type });\n    }\n  };\n\n  return (\n    <div>\n      {/* <Button variant=\"outlined\" color=\"primary\" onClick={handleClickOpen}>\n        {props.name}\n      </Button> */}\n      <ListItem button onClick={handleClickOpen}>\n        <ListItemIcon>\n          {props.type === \"room\" ? <RoomIcon /> : <CategoryIcon />}\n        </ListItemIcon>\n        <ListItemText primary={props.name} />\n      </ListItem>\n      <SimpleDialog\n        name={props.name}\n        type={props.type}\n        contents={props.contents}\n        selectedValue={selectedValue}\n        open={open}\n        onClose={handleClose}\n      />\n    </div>\n  );\n}\n","/mnt/d/Desktop/WIP/home-automation/client/src/components/DashboardExample.js",["108"],"import React from \"react\";\nimport clsx from \"clsx\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\nimport Drawer from \"@material-ui/core/Drawer\";\nimport Box from \"@material-ui/core/Box\";\nimport AppBar from \"@material-ui/core/AppBar\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport List from \"@material-ui/core/List\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Divider from \"@material-ui/core/Divider\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport Container from \"@material-ui/core/Container\";\nimport MenuIcon from \"@material-ui/icons/Menu\";\nimport ChevronLeftIcon from \"@material-ui/icons/ChevronLeft\";\nimport Button from \"@material-ui/core/Button\";\nimport { getUser, removeUserSession } from \"../utils/Common\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport ListItemIcon from \"@material-ui/core/ListItemIcon\";\nimport ListItemText from \"@material-ui/core/ListItemText\";\nimport Sensors from \"./Sensors\";\nimport DashboardIcon from \"@material-ui/icons/Dashboard\";\nimport AssignmentIcon from \"@material-ui/icons/Assignment\";\nimport ExitToAppIcon from \"@material-ui/icons/ExitToApp\";\nimport Dialog from \"./DialogFilterBy\";\nimport mqttService from \"./MQTT\";\n\nimport { withRouter } from \"react-router-dom\";\n\nfunction Copyright() {\n  return (\n    <Typography variant=\"body2\" color=\"textSecondary\" align=\"center\">\n      {\"Copyright © \"}\n      {\"Home Automation \"}\n      {new Date().getFullYear()}\n      {\".\"}\n    </Typography>\n  );\n}\n\nconst drawerWidth = 240;\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    display: \"flex\",\n  },\n  toolbar: {\n    paddingRight: 24, // keep right padding when drawer closed\n  },\n  toolbarIcon: {\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"flex-end\",\n    padding: \"0 8px\",\n    ...theme.mixins.toolbar,\n  },\n  appBar: {\n    backgroundColor: theme.palette.secondary.main,\n    zIndex: theme.zIndex.drawer + 1,\n    transition: theme.transitions.create([\"width\", \"margin\"], {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.leavingScreen,\n    }),\n  },\n  appBarShift: {\n    marginLeft: drawerWidth,\n    width: `calc(100% - ${drawerWidth}px)`,\n    transition: theme.transitions.create([\"width\", \"margin\"], {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.enteringScreen,\n    }),\n  },\n  menuButton: {\n    marginRight: 36,\n  },\n  menuButtonHidden: {\n    display: \"none\",\n  },\n  title: {\n    flexGrow: 1,\n  },\n  drawerPaper: {\n    position: \"relative\",\n    whiteSpace: \"nowrap\",\n    width: drawerWidth,\n    transition: theme.transitions.create(\"width\", {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.enteringScreen,\n    }),\n  },\n  drawerPaperClose: {\n    overflowX: \"hidden\",\n    transition: theme.transitions.create(\"width\", {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.leavingScreen,\n    }),\n    width: theme.spacing(7),\n    [theme.breakpoints.up(\"sm\")]: {\n      width: theme.spacing(9),\n    },\n  },\n  appBarSpacer: theme.mixins.toolbar,\n  content: {\n    flexGrow: 1,\n    height: \"100vh\",\n    overflow: \"auto\",\n  },\n  container: {\n    paddingTop: theme.spacing(4),\n    paddingBottom: theme.spacing(4),\n  },\n  paper: {\n    padding: theme.spacing(2),\n    display: \"flex\",\n    overflow: \"auto\",\n    flexDirection: \"column\",\n  },\n  fixedHeight: {\n    height: 240,\n  },\n  primaryAction: {\n    [theme.breakpoints.down(\"sm\")]: {\n      display: \"none\",\n    },\n  },\n  brand: {\n    // lineHeight: 1,\n    paddingTop: theme.spacing(1),\n    paddingLeft: theme.spacing(3),\n    paddingBottom: theme.spacing(1),\n    marginRight: 12,\n  },\n}));\n\nfunction Dashboard(props) {\n  const classes = useStyles();\n  const [open, setOpen] = React.useState(true);\n  const [selectedItem, selectItem] = React.useState({\n    selected: \"All\",\n    type: \"all\",\n  });\n\n  // handle click event of logout button\n  const handleLogout = () => {\n    const mqttClient = mqttService.getClient();\n    mqttService.closeConnection(mqttClient);\n    removeUserSession();\n    props.history.push(\"/login\");\n  };\n\n  const handleDrawerOpen = () => {\n    setOpen(true);\n  };\n  const handleDrawerClose = () => {\n    setOpen(false);\n  };\n\n  const handleAllButton = () => {\n    selectItem({\n      selected: \"All\",\n      type: \"all\",\n    });\n  };\n\n  let currentlyDisplayedItem = \"All\";\n  if (selectedItem.type === \"room\") {\n    currentlyDisplayedItem = \"Room: \" + selectedItem.selected;\n  } else if (selectedItem.type === \"sensor-type\") {\n    currentlyDisplayedItem = \"Sensor type: \" + selectedItem.selected;\n  }\n\n  const rooms = [...new Set(props.sensors.map((sensor) => sensor.room))];\n  const categories = [...new Set(props.sensors.map((sensor) => sensor.type))];\n  const user = getUser();\n  return (\n    <div className={classes.root}>\n      <CssBaseline />\n      <AppBar\n        position=\"absolute\"\n        className={clsx(classes.appBar, open && classes.appBarShift)}\n      >\n        <Toolbar className={classes.toolbar}>\n          <IconButton\n            edge=\"start\"\n            color=\"inherit\"\n            aria-label=\"open drawer\"\n            onClick={handleDrawerOpen}\n            className={clsx(\n              classes.menuButton,\n              open && classes.menuButtonHidden\n            )}\n          >\n            <MenuIcon />\n          </IconButton>\n          {/* <Link\n            href=\"/\"\n            component={RouterLink}\n            to=\"/\"\n            color=\"primary\"\n            underline=\"none\"\n            variant=\"h5\"\n            className={classes.brand}\n          >\n            {<img src={Logo} alt=\"\" height={50} />}\n          </Link> */}\n          <Typography\n            component=\"h1\"\n            variant=\"h6\"\n            color=\"inherit\"\n            noWrap\n            className={classes.title}\n          >\n            Dashboard\n          </Typography>\n          <Typography\n            component=\"h6\"\n            variant=\"h6\"\n            color=\"inherit\"\n            noWrap\n            className={classes.title}\n          >\n            {currentlyDisplayedItem}\n          </Typography>\n          <Button\n            variant=\"contained\"\n            color=\"secondary\"\n            className={classes.primaryAction}\n            onClick={handleLogout}\n          >\n            Log Out\n          </Button>\n        </Toolbar>\n      </AppBar>\n      <Drawer\n        variant=\"permanent\"\n        classes={{\n          paper: clsx(classes.drawerPaper, !open && classes.drawerPaperClose),\n        }}\n        open={open}\n      >\n        <div className={classes.toolbarIcon}>\n          <IconButton onClick={handleDrawerClose}>\n            <ChevronLeftIcon />\n          </IconButton>\n        </div>\n        <Divider />\n        <List>\n          <ListItem button onClick={handleAllButton}>\n            <ListItemIcon>\n              <DashboardIcon />\n            </ListItemIcon>\n            <ListItemText primary=\"All\" />\n          </ListItem>\n          <Dialog\n            contents={rooms}\n            selectItem={selectItem}\n            name=\"Rooms\"\n            type=\"room\"\n          />\n          <Dialog\n            contents={categories}\n            selectItem={selectItem}\n            name=\"Types\"\n            type=\"sensor-type\"\n          />\n        </List>\n        <Divider />\n        <List>\n          <ListItem button>\n            <ListItemIcon>\n              <AssignmentIcon />\n            </ListItemIcon>\n            <ListItemText primary=\"Actions\" />\n          </ListItem>\n          <ListItem button onClick={handleLogout}>\n            <ListItemIcon>\n              <ExitToAppIcon />\n            </ListItemIcon>\n            <ListItemText primary=\"Log Out\" />\n          </ListItem>\n        </List>\n      </Drawer>\n      <main className={classes.content}>\n        <div className={classes.appBarSpacer} />\n        <Container maxWidth=\"lg\" className={classes.container}>\n          <Sensors\n            sensors={props.sensors}\n            filtered={selectedItem.type}\n            selected={selectedItem.selected}\n          />\n          <Box pt={4}>\n            <Copyright />\n          </Box>\n        </Container>\n      </main>\n    </div>\n  );\n}\n\nexport default withRouter(Dashboard);\n","/mnt/d/Desktop/WIP/home-automation/client/src/components/FetcherMQTTExample.js",[],{"ruleId":"109","replacedBy":"110"},{"ruleId":"111","replacedBy":"112"},{"ruleId":"113","severity":1,"message":"114","line":5,"column":18,"nodeType":"115","messageId":"116","endLine":5,"endColumn":23},{"ruleId":"113","severity":1,"message":"117","line":9,"column":8,"nodeType":"115","messageId":"116","endLine":9,"endColumn":17},{"ruleId":"113","severity":1,"message":"118","line":100,"column":9,"nodeType":"115","messageId":"116","endLine":100,"endColumn":13},{"ruleId":"109","replacedBy":"119"},{"ruleId":"111","replacedBy":"120"},{"ruleId":"113","severity":1,"message":"121","line":19,"column":9,"nodeType":"115","messageId":"116","endLine":19,"endColumn":16},{"ruleId":"113","severity":1,"message":"122","line":66,"column":10,"nodeType":"115","messageId":"116","endLine":66,"endColumn":17},{"ruleId":"113","severity":1,"message":"123","line":36,"column":20,"nodeType":"115","messageId":"116","endLine":36,"endColumn":33},{"ruleId":"113","severity":1,"message":"118","line":174,"column":9,"nodeType":"115","messageId":"116","endLine":174,"endColumn":13},"no-native-reassign",["124"],"no-negated-in-lhs",["125"],"no-unused-vars","'Route' is defined but never used.","Identifier","unusedVar","'Dashboard' is defined but never used.","'user' is assigned a value but never used.",["124"],["125"],"'classes' is assigned a value but never used.","'loading' is assigned a value but never used.","'selectedValue' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]