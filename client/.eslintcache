[{"/mnt/d/Desktop/WIP/home-automation/client/src/index.js":"1","/mnt/d/Desktop/WIP/home-automation/client/src/reportWebVitals.js":"2","/mnt/d/Desktop/WIP/home-automation/client/src/App.js":"3","/mnt/d/Desktop/WIP/home-automation/client/src/pages/Index.js":"4","/mnt/d/Desktop/WIP/home-automation/client/src/components/HorizontalNav2.js":"5","/mnt/d/Desktop/WIP/home-automation/client/src/theme/theme.js":"6","/mnt/d/Desktop/WIP/home-automation/client/src/components/Main.js":"7","/mnt/d/Desktop/WIP/home-automation/client/src/components/TemperatureHumidityCard.js":"8","/mnt/d/Desktop/WIP/home-automation/client/src/components/RelayCard.js":"9","/mnt/d/Desktop/WIP/home-automation/client/src/components/MQTT.js":"10","/mnt/d/Desktop/WIP/home-automation/client/src/components/Sensor.js":"11","/mnt/d/Desktop/WIP/home-automation/client/src/components/AlertMessage.js":"12","/mnt/d/Desktop/WIP/home-automation/client/src/components/FetcherMQTT.js":"13"},{"size":678,"mtime":1608134068832,"results":"14","hashOfConfig":"15"},{"size":362,"mtime":1607907510898,"results":"16","hashOfConfig":"15"},{"size":350,"mtime":1608043249588,"results":"17","hashOfConfig":"15"},{"size":716,"mtime":1608155432626,"results":"18","hashOfConfig":"15"},{"size":5446,"mtime":1608155470947,"results":"19","hashOfConfig":"15"},{"size":1148,"mtime":1608324676282,"results":"20","hashOfConfig":"15"},{"size":970,"mtime":1608496287229,"results":"21","hashOfConfig":"15"},{"size":1695,"mtime":1608404179325,"results":"22","hashOfConfig":"15"},{"size":1821,"mtime":1608492722066,"results":"23","hashOfConfig":"15"},{"size":1665,"mtime":1608511729244,"results":"24","hashOfConfig":"15"},{"size":1176,"mtime":1608476864024,"results":"25","hashOfConfig":"15"},{"size":1490,"mtime":1608516212719,"results":"26","hashOfConfig":"15"},{"size":2538,"mtime":1608511725600,"results":"27","hashOfConfig":"15"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},"jkh3hr",{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37","usedDeprecatedRules":"30"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46","usedDeprecatedRules":"30"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49","usedDeprecatedRules":"30"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"56","messages":"57","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/mnt/d/Desktop/WIP/home-automation/client/src/index.js",[],["58","59"],"/mnt/d/Desktop/WIP/home-automation/client/src/reportWebVitals.js",[],"/mnt/d/Desktop/WIP/home-automation/client/src/App.js",[],"/mnt/d/Desktop/WIP/home-automation/client/src/pages/Index.js",["60"],"import React from \"react\";\n\nimport HorizontalNav2 from \"../components/HorizontalNav2\";\nimport Main from \"../components/Main\";\nimport Logo from \"../assets/smart-house.svg\"\n\nexport default function Index() {\n  return (\n    <React.Fragment>\n      <HorizontalNav2\n        content={{\n          brand: {\n            text: \"Home Automation\",\n            // image: {Logo},\n            image:\n              \"https://www.flaticon.com/svg/static/icons/svg/3063/3063654.svg\",\n            width: \"110\",\n          },\n          link1: \"All Sensors\",\n          link2: \"Rooms\",\n          link3: \"Actions\",\n          link4: \"User\",\n          \"primary-action\": \"Log Out\",\n        }}\n      />\n      <Main/>\n    </React.Fragment>\n  );\n}\n","/mnt/d/Desktop/WIP/home-automation/client/src/components/HorizontalNav2.js",[],"/mnt/d/Desktop/WIP/home-automation/client/src/theme/theme.js",[],"/mnt/d/Desktop/WIP/home-automation/client/src/components/Main.js",[],"/mnt/d/Desktop/WIP/home-automation/client/src/components/TemperatureHumidityCard.js",["61"],"import React from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Card from \"@material-ui/core/Card\";\n// import CardHeader from \"@material-ui/core/CardHeader\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport Typography from \"@material-ui/core/Typography\";\nimport CardMedia from \"@material-ui/core/CardMedia\";\nimport icon from \"../assets/thermometer.png\"\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    minWidth: 122,\n    display: \"flex\",\n  },\n  title: {\n    fontSize: 14,\n  },\n  pos: {\n    marginBottom: 12,\n  },\n  media: {\n    marginLeft: 12,\n    width: 122,\n    height: 122,\n    \n  },\n  degrees: {\n    textAlign: 'center',\n  }\n}));\n\nexport default function OutlinedCard(props) {\n  const classes = useStyles();\n  \n  \n  const content = {\n    roomName: 'roomName',\n    device: 'deviceId',\n    temperature: \"-\" ,\n    humidity: \"-\",\n    ...props.content\n  };\n\n  return (\n    <Card className={classes.root} variant=\"outlined\">\n      {/* <CardHeader title=\"Sensor\" /> */}\n\n      <CardContent>\n        <Typography className={classes.title} color=\"secondary\" gutterBottom>\n         {props.roomName}\n        </Typography>\n        <Typography variant=\"h5\" component=\"h2\">\n          TempHum\n        </Typography>\n        <Typography className={classes.pos} color=\"secondary\">\n        {props.device}\n        </Typography>\n      </CardContent>\n      <CardMedia\n        className={classes.media}\n        image={icon}\n        title=\"Temperature\"\n      />\n      <CardContent>\n        <Typography variant=\"h5\" className={classes.degrees} >\n          {props.temperature} &#8451;\n          <br />\n          \n        </Typography>\n        <Typography variant=\"h5\" className={classes.degrees} >\n          {props.humidity} %\n          <br />\n          </Typography>\n\n      </CardContent>\n    </Card>\n  );\n}\n","/mnt/d/Desktop/WIP/home-automation/client/src/components/RelayCard.js",["62","63"],"import React from \"react\";\nimport { makeStyles, useTheme } from \"@material-ui/core/styles\";\nimport Card from \"@material-ui/core/Card\";\nimport CardHeader from \"@material-ui/core/CardHeader\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport Typography from \"@material-ui/core/Typography\";\nimport CardMedia from \"@material-ui/core/CardMedia\";\nimport LightBulbIcon from \"../assets/lightbulb.png\";\nimport Switch from \"@material-ui/core/Switch\";\nimport mqttService from \"./MQTT\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    minWidth: 122,\n    display: \"flex\",\n  },\n  title: {\n    fontSize: 14,\n  },\n  pos: {\n    marginBottom: 12,\n  },\n  media: {\n    marginLeft: 12,\n    width: 122,\n    height: 122,\n  },\n  degrees: {\n    textAlign: \"center\",\n  },\n}));\n\nexport default function OutlinedCard(props) {\n  const classes = useStyles();\n\n  const onChangeHandler = (ev) => {\n\n    const client = mqttService.getClient();\n    console.log(client, props.command);\n\n    if (ev.target.checked) {\n      mqttService.publishMessage(client, props.command, \"ON\");\n    } else {\n      mqttService.publishMessage(client, props.command, \"OFF\");\n    }\n  };\n\n  return (\n    <Card className={classes.root} variant=\"outlined\">\n      {/* <CardHeader title=\"Sensor\" /> */}\n\n      <CardContent>\n        <Typography className={classes.title} color=\"secondary\" gutterBottom>\n          {props.roomName}\n        </Typography>\n        <Typography variant=\"h5\" component=\"h2\">\n          {props.name}\n        </Typography>\n        <Typography className={classes.pos} color=\"secondary\">\n          {props.device}\n        </Typography>\n        <Switch onChange={onChangeHandler} />\n      </CardContent>\n      <CardMedia\n        className={classes.media}\n        image={LightBulbIcon}\n        title=\"Lightbulb\"\n      />\n    </Card>\n  );\n}\n","/mnt/d/Desktop/WIP/home-automation/client/src/components/MQTT.js",[],"/mnt/d/Desktop/WIP/home-automation/client/src/components/Sensor.js",[],"/mnt/d/Desktop/WIP/home-automation/client/src/components/AlertMessage.js",[],"/mnt/d/Desktop/WIP/home-automation/client/src/components/FetcherMQTT.js",["64"],{"ruleId":"65","replacedBy":"66"},{"ruleId":"67","replacedBy":"68"},{"ruleId":"69","severity":1,"message":"70","line":5,"column":8,"nodeType":"71","messageId":"72","endLine":5,"endColumn":12},{"ruleId":"69","severity":1,"message":"73","line":35,"column":9,"nodeType":"71","messageId":"72","endLine":35,"endColumn":16},{"ruleId":"69","severity":1,"message":"74","line":2,"column":22,"nodeType":"71","messageId":"72","endLine":2,"endColumn":30},{"ruleId":"69","severity":1,"message":"75","line":4,"column":8,"nodeType":"71","messageId":"72","endLine":4,"endColumn":18},{"ruleId":"69","severity":1,"message":"76","line":8,"column":7,"nodeType":"71","messageId":"72","endLine":8,"endColumn":25},"no-native-reassign",["77"],"no-negated-in-lhs",["78"],"no-unused-vars","'Logo' is defined but never used.","Identifier","unusedVar","'content' is assigned a value but never used.","'useTheme' is defined but never used.","'CardHeader' is defined but never used.","'convertTopicToInfo' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]